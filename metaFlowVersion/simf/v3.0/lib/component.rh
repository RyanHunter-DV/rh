class Component ##{
	attr_accessor :name;
	attr_accessor :paths;
	attr :fileset;
	attr :publish;
	attr :blocks;
	attr :location;
	def initialize n ##{{{
		@name     = n;
		@location = '';
		@blocks   = [];
		@publish  = :copy; ## default publish method
		@paths    = {};
		@paths[:publish] = $outAnchor+'/components/'+n;
		@fileset = FileSet.new(@paths[:publish]);
	end ##}}}

	def targetPath; return @paths[:publish]; end

	def incdirs; return @fileset.incdirs; end
	def targets; return @fileset.targets; end

	def add loc,&block ##{{{
		p = ->(*opts) {
			@location = loc;
			self.instance_eval &block;
		};
		@blocks << p;
	end ##}}}

	## if t is nil, return current publish method
	## else set current publish method as t.to_sym;
	def publish t=nil ##{{{
		return @publish if t==nil;
		@publish = t.to_sym;
	end ##}}}

	## if l != nil, then assign a new filelist name to current component
	## attention that one component can only have one filelist. But can have
	## multiple files, and auto incdirs for all paths
	def fileset f,l=nil ##{{{
		@fileset.filelist = l unless l==nil;
		files = Shell.getfiles f,@location;
		@fileset.setCurrentSourcePath @location;
		files.each do |f|
			@fileset.file f;
		end
		## puts "DEBUG, files: #{@fileset.targets}"
	end ##}}}

	## once the component is instantiated in a config, it will be
	## elaborated
	def elaborate ##{{{
		@blocks.each do |b|
			self.instance_eval &b;
		end
	end ##}}}

	def files ##{{{
		return @fileset.targets;
	end ##}}}


end ##}


module ComponentPool ##{

	@pool = {};

	def self.register c ##{{{{
		@pool[c.name.to_sym] = c;
	end ##}}}

	def self.find n ##{{{
		return @pool[n.to_sym] if @pool.has_key?(n.to_sym);
		return nil;
	end ##}}}

	def self.createAndRegisterNewComponent n ##{{{
		n = n.to_s;
		c = Component.new(n);
		self.register c;
		return c;
	end ##}}}
end ##}

def component n,&block ##{
	return unless block_given?;
	n = n.to_s;
	##puts "from component, to find:#{n}"
	c = ComponentPool.find(n);
	if c==nil
		c = ComponentPool.createAndRegisterNewComponent(n);
	end
	location = File.dirname(File.absolute_path(block.source_location[0]));
	##puts "location: #{location}"
	##puts "component(#{n})"
	c.add location,&block;
end ##}
