class BuildFlow < FlowBase ##{
public

	def initialize ##{{{
		super('build');
	end ##}}}

	def setup ##{{{
		setupBasicFlow do ##{
		end ##}
	end ##}}}
	def set cn ##{{{
		c = ConfigPool.find(cn);
		if c==nil
			$stderr.puts "Error, no config(#{cn}) exists";
			return
		end
		@flow.config    = c;
		@flow.simulator = c.simulator;
	end ##}}}

	def compile
		puts "buildflow(:#{@flow.config.name}).compile running ... ..."
		@flow.compile;
	end
	def elaborate
		puts "buildflow(:#{@flow.config.name}).elaborate running ... ..."
		@flow.elaborate;
	end
	def run
		puts "buildflow(:#{@flow.config.name}) running ... ..."
		sig = compile;
		sig = elaborate if sig == 0;
		if sig == 0
			puts "buildflow(:#{@flow.config.name}) passed";
		else
			$stderr.puts "buildflow(:#{@flow.config.name}) failed";
		end
		return sig;
	end

	def inject n,&block ##{{{
		@procedures[n.to_sym]=[] unless @procedures.has_key?(n.to_sym);
		@procedures[n.to_sym] << block;
	end ##}}}

private
	def setupBasicFlow &block ##{{{
		@flow = FlowBase.new('build-basic');
		@flow.createContext('config');
		@flow.createContext('simulator');
		@flow.define_singleton_method :builtinXLMCompileOptions do
			## TODO
		end
		@flow.define_singleton_method :builtinVCSCompileOptions do
			## TODO
		end
		@flow.define_singleton_method :setupCompileCommand do |*userOpts| ##{
			builtins = [];
			builtins << '-f '+@config.filelist;
			if @simulator.name=='vcs'
				builtins.append *builtinVCSCompileOptions;
			else
				builtins.append *builtinXLMCompileOptions;
			end
			@simulator.generateCommand :compile,*builtins,*userOpts;
		end ##}
		@flow.define_singleton_method :compile do
			setupCompileCommand *self.config.compopts;
			@simulator.compile;
		end
		@flow.define_singleton_method :setupElaborateCommand do |*userOpts| ##{
			builtins = [];
			@simulator.generateCommand :elaborate,*userOpts;
			##$stderr.puts "Error, no elaboration command set now(#{__FILE__},#{__LINE__})"
			## TODO
		end ##}
		@flow.define_singleton_method :elaborate do ##{
			setupElaborateCommand self.config.elabopts;
			@simulator.elaborate ;
		end ##}
	end ##}}}
end ##}
