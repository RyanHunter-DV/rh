class Simulator ##{
public

	attr_accessor :name;
	attr_accessor :paths;
	attr_accessor :cmds;
	attr_accessor :worktop;

	attr :bits;
	attr :logs;
	attr :libpath;
	attr :worklib;
	attr :access;
	attr :snapshot;

	def initialize n,b,s ##{{{
		@name = n.to_s;
		@libpath = "./:#{ENV['CDS_INST_DIR']}/tools/inca/lib";
		@libpath += ":#{ENV['CDS_INST_DIR']}/tools/lib";
		@libpath += ":#{ENV['CDS_INST_DIR']}/tools/lib/64bit";
		@worklib = 'ncvlog_lib';
		@snapshot= @worklib+'.'+@worklib+':'+@worklib;
		@worktop = 'top';
		@access  = '+RWC';
		initPaths;
		@bits = 64;
		@paths[:build] = b.to_s;
		if (@name=='xlm')
			## if using xlm, use the sim path equals to build path
			@paths[:sim]   = b.to_s;
		else
			@paths[:sim]   = s.to_s;
		end
		@logs = {};
		@logs[:compile]= 'default_compile.log';
		@logs[:elab]   = 'default_elab.log';
		@logs[:sim]    = 'default_sim.log';
		initCmds;
		initCmdfiles;
	end ##}}}
	def log t=:compile,f ##{{{
		@logs[t] = f;
	end ##}}}

	def worklib n ##{{{
		@worklib = n.to_s;
	end ##}}}

	def generateCommand t=:compile,*opts ##{{{
		cmd = [];
		f   = '';
		case (t)
		when :compile
			f=File.join(@paths[:build],@cmdfiles[t]);
			allocateCompileCmds;
		when :elaborate
			f=File.join(@paths[:build],@cmdfiles[t]);
			allocateElaborateCmds;
		when :sim
			f=File.join(@paths[:sim],@cmdfiles[t]);
			allocateSimCmds;
		end
		@cmds[t].each do |arg|
			cmd << arg; ## get base cmd
		end
		cmd.append(*opts);
		cmdline = cmd.join(' ');
		Shell.generate :file,f,cmdline;
	end ##}}}

	def plusIncdirOption *incs ##{{{
		rtns = [];
		arg  = '';
		if @name.to_sym == :vcs
			arg = '+incdir+'
		else
			arg = '-incdir '
		end
		incs.each do |inc|
			rtns << arg+inc
		end
		return rtns;
	end ##}}}

	def compile ##{{{
		p   = @paths[:build];
		buildWorklib if @name=='xlm'; ## for xlm only
		cmd = 'source ./'+ @cmdfiles[:compile];
		rtn = Shell.exec p,cmd;
		return rtn;
	end ##}}}
	def elaborate ##{{{
		p   = @paths[:build];
		cmd = 'source ./'+ @cmdfiles[:elaborate];
		rtn = Shell.exec p,cmd;
		return rtn;
	end ##}}}

	def sim ##{{{
		p   = @paths[:sim];
		cmd = 'source ./'+@cmdfiles[:sim];
		rtn = Shell.exec p,cmd;
		return rtn;
	end ##}}}

private

	def buildWorklib ##{{{
		hdl = File.join(@paths[:build],'hdl.var');
		cds = File.join(@paths[:build],'cds.lib');
		Shell.generate :file,hdl,"DEFINE WORK #{@worklib}";
		Shell.generate :file,cds,"DEFINE #{@worklib} ./#{@worklib}";
		Shell.makedir File.join(@paths[:build],@worklib);
	end ##}}}

	def initCmds ##{{{
		@cmds={};
		tool = @name.to_sym;
		if tool==:vcs
			@cmds[:compile] = 'vcs';
			@cmds[:sim] = 'simf_vcs_exe';
		else
			@cmds[:compile]  = [];
			@cmds[:elaborate]= [];
			@cmds[:sim]      = [];
			##@cmds[:elaborate] << 'xmelab';
			##@cmds[:sim] << 'xmsim';
		end
	end ##}}}
	def allocateCompileCmds ##{{{
		cmds = [];
		cmds << 'xmvlog';
		cmds << '-64BIT' if @bits==64;
		cmds << '-SV'; ## default has
		cmds << "-LOGFILE #{@logs[:compile]}";
		@cmds[:compile] = cmds;
	end ##}}}
	def allocateElaborateCmds ##{{{
		return if @name == 'vcs';
		cmds = [];
		default = ENV['LD_LIBRARY_PATH'];
		if default==nil
			default = '';
		else
			default = ':'+default;
		end
		cmds << Shell.setenv('LD_LIBRARY_PATH',@libpath+default)+';';
		cmds << 'xmelab';
		cmds << '-64BIT' if @bits==64;
		cmds << "-LIBNAME #{@worklib}";
		cmds << "-LOGFILE #{@logs[:elab]}";
		cmds << "-access #{@access}";
		cmds << "#{@worklib}.#{@worktop}";
		cmds << "-SNAPSHOT #{@snapshot}";
		@cmds[:elaborate] = cmds;
	end ##}}}
	def allocateSimCmds ##{{{
		cmds = [];
		default = ENV['LD_LIBRARY_PATH'];
		default = '' if default==nil;
		cmds << Shell.setenv('LD_LIBRARY_PATH',@libpath+default)+';';
		cmds << 'xmsim';
		cmds << '-64BIT' if @bits==64;
		cmds << '-RUN';
		cmds << "-LOGFILE #{@logs[:sim]}";
		cmds << "#{@snapshot}";
		@cmds[:sim] = cmds;
	end ##}}}
	def initCmdfiles ##{{{
		@cmdfiles={};
		@cmdfiles[:compile]  = 'compile_command';
		@cmdfiles[:elaborate]= 'elaborate_command';
		@cmdfiles[:sim]      = 'sim_command';
	end ##}}}

	def initPaths ##{{{
		@paths = {};
		@paths[:build]= '';
		@paths[:sim]  = '';
	end ##}}}
end ##}
