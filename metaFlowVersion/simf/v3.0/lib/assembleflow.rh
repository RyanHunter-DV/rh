class AssembleFlow < FlowBase ##{
public
	attr_accessor :procedures;

	def initialize ##{{{
		super('assemble');
		@procedures={};
	end ##}}}

	def setup ##{{{
		setupBasicFlow do ##{
			self.buildDir;
			incdirs = [];
			files = [];
			@config.insts.each do |c|
				incOpts = @config.simulator.plusIncdirOption *c.incdirs;
				incdirs.append(*incOpts);
				files.append(*c.targets.values);
			end
			f = File.join(@config.paths[:build],@config.filelist);
			Shell.generate :file, f,*incdirs,*files
		end ##}
		@procedures.each_pair do |n,b| ##{
			self.define_singleton_method n.to_sym do
				b.call
			end
			self.instance_eval n.to_s
		end ##}
	end ##}}}

	def run cn ##{{{
		c = ConfigPool.find(cn);
		if c==nil
			$stderr.puts "Error, no config(#{cn}) exists";
			return;
		end
		puts "assembleflow(:#{c.name}) running ... ..."
		@flow.config = c;
		@flow.run
	end ##}}}

	def inject n,&block ##{{{
		@procedures[n.to_sym]=[] unless @procedures.has_key?(n.to_sym);
		@procedures[n.to_sym]<< block;
	end ##}}}

private
	def setupBasicFlow &block ##{{{
		@flow=FlowBase.new('assemble-basic');
		@flow.createContext('config');
		@flow.define_singleton_method :buildDir do
			Shell.makedir @config.paths[:root], @config.paths[:build], @config.paths[:sim];
		end
		@flow.createProcedures &block;
	end ##}}}

end ##}
