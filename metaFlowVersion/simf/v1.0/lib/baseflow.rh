rhload 'lib/simulator'

class BaseFlow ##{

	attr_accessor :simulatorOpts;
	attr_accessor :eda;
	attr_accessor :simpath;
	attr_accessor :filelist;
	attr :fl;

	def initialize
		puts "PLACEHOLDER, calling BaseFlow.new"
		@simulatorOpts = {};
		@simulatorOpts[:comp] = [];
		@simulatorOpts[:elab] = [];
		@simulatorOpts[:sim]  = [];
		@eda = :xlm; ## by default
		@out = "#{ENV['PROJECT_HOME']}/out"
		@simpath = "#{ENV['PROJECT_HOME']}/out/sim"
		@filelist= [];
		@fl = '';
	end

	def assemble
		"""
		for baseflow, assemble is just to get the filelist
		"""
		@fl = 'filelist.f';
		fh = File.open(@simpath+'/'+@fl,'w');
		@filelist.each do |f|
			fh.write f;
		end
		fh.close;
		@simulatorOpts[:comp] << "-f #{@fl}";
	end

	def mkdir p
		return if Dir.exists?(p);
		system "mkdir #{p}";
	end

	def build
		"""
		to build dir which required later
		"""
		mkdir @out
		mkdir @simpath
	end

	def run
		puts "PLACEHOLDER, running baseflow"
		"""
		baseflow is to assemble the filelist and then call simulator's cmd
		"""
		build
		assemble
		Simulator.eda= @eda;
		Simulator.path= @simpath;
		Simulator.run @simulatorOpts
	end

	def addOption m,opt
		puts "PLACEHOLDER, get option: #{m}::#{opt}"
		@simulatorOpts[m.to_sym] << opt;
	end

end ##}


def fileset *files

	path = caller(1)[0];
	path = path.split(':')[0];
	path = File.dirname(File.absolute_path(path));
	files.each do |f|
		SIMF.addfile File.join(path,f);
	end

end
