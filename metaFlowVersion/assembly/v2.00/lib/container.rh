class ContainerClass; ##{

	attr_accessor :path;
	attr_accessor :fps;
	attr_accessor :parent;
	attr_accessor :name;

	def initialize name,p=nil;
		name = name.to_s;
		@fps    = {};
		@parent = p;
		@name   = name;
		## set full path
		if p != nil
			@path   = p.path+'.'+name;
		else
			@path = name;
		end
	end

	def hasfp? n;
		n=n.to_s;
		return @fps.has_key?(n);
	end

	def addfp fp;
		@fps[fp.name.to_s] = fp;
	end

end ##}

module ContainerRegistry; ##{
	@@containerlist = [];
	def self.searchContainerByName n;
		n=n.to_s;
		@@containerlist.each do |c|
			return c if c.name == n;
		end
	end

	def self.createNewContainer n,pname=nil;
		if pname != nil
			p=searchContainerByName pname;
		else
			p=nil;
		end
		@@containerlist << ContainerClass.new n,p;
	end

end ##}

def container name,**opts={}; ##{
	if opts.has_key?(:parent)
		ContainerRegistry.createNewContainer name,opts[:parent];
	else
		ContainerRegistry.createNewContainer name;
	end
end ##}