## requires loaded at uvm.rh

container :comp,:parent=>:uvm

class UVMCompClass < UVMObjClass; ##{

	def initialize name;
		super name;
	end

end ##}



fp :utils,:container=>:comp do ##{
	|**opts|
	## TODO
	## add code of component's begin/end
	## extra field utils
end ##}


fp :driver,:container=>:comp do ##{{{
	|**opts,&b|

	## init key variables
	name = 'unknown';
	req  = 'uvm_sequence_item';
	rsp  = 'req';

	name = opts[:name]if opts.has_key?(:name);
	req  = opts[:req] if opts.has_key?(:req);
	rsp  = opts[:rsp] if opts.has_key?(:rsp);

	## TODO, create instance of UVMCompClass,
	drv = UVMCompClass.new name;
	addobjects drv;
	rawcode drv.classHeadCode;
	drv.instance_eval &b;


end ##}}}
