module FPLib ##{
	@@fplist = [];
	def self.registerNewFP fp ##{{{
		@@fplist << fp;
	end ##}}}

	def self.createNewFP name,parent,&block ##{{{
		fullname = name.to_s;
		fullname = parent.to_s+'.'+name.to_s if parent != nil;
		o = FPClass.new(fullname,&block);
		return o;
	end ##}}}
	def self.createAndRegisterNewFP name,parent,&block ##{{{
		o = createNewFP name,parent,&block
		self.registerNewFP(o);
		return o;
	end ##}}}

	def self.getFPs; @@fplist; end
	def self.getFP n;
		@@fplist.each do |o|
			return o if o.name.to_s == n.to_s;
		end
		return nil;
	end

	class FPClass ##{{{
		attr_accessor :code;
		attr_accessor :indents;
		attr_accessor :outdents;
		attr_accessor :name;
		attr_accessor :blocks;
		attr_accessor :subfps;
		def initialize name,&block ##{{{
			@name    = name;
			@configs = {};
			@scope   = 'global';
			@insts   = {};
			@instid  = 0;
			@code    = [];
			@blocks  = [];
			@indents = [];
			@outdents= [];
			@blocks << block if block
			@subfps  = [];
			@configs[:raw] = true;
		end ##}}}
		def setScope s ##{{{
			@scope = s;
		end ##}}}
		def addsubfp fpi; @subfps<<fpi; end


		def setNameConfig n
			@configs[:name] = n;
		end

		def register fpi ##{{{
			@insts[fpi.getname] = fpi;
		end ##}}}

		def getname; @name; end
		def insts; @insts; end

		def createNewInstance ##{{{
			iname = "#{@name}_#{@instid}"
			@instid+=1;
			fpi = FPInstClass.new(iname,self);
			register(fpi);
		end ##}}}
		def addcode s,opts={}
			scode = s.split("\n");
			lines = scode.length
			if opts.has_key?(:indent)
				@indents << true
			else
				@indents << false
			end
			if opts.has_key?(:outdent)
				@outdents << true;
			else
				@outdents << false;
			end
			(lines-1).times do
				@indents << false
				@outdents<< false
			end
			@code<<scode
			@code.flatten!
		end
	end ##}}}

	class FPInstClass < FPClass ##{{{
		def initialize name,parent
			super name;
			copy parent;
			@parent = parent.name;
			@loc    = {};
			@ccode  = ""; ## configured code
			@cindent=  0;
		end

		def getCindent; @cindent; end

		def copy p ##{{{
			@code    = p.code;
			@indents = p.indents;
			@outdents= p.outdents;
			@blocks  = p.blocks;
			@subfps  =p.subfps;
		end ##}}}

		## use to format after configure done
		## return a string for each FPInst
		def getFormatedCode bindent
			@cindent = bindent;
			formatcodes
			getConfiguredCode
		end


		def addindent; @cindent+=1; end
		def subindent; @cindent-=1; end

		def formatline c;
			indent = ''
			@cindent.times do
				indent+= "\t"
			end
			return indent + c + "\n"
		end

		def generateRawCode
			@blocks.each do
				|b|
				b.call self,@configs
			end
		end
		def formatcodes
			## formatting the raw code
			index = 0
			codecopy = @code
			@code = [] ## clear the origin code
			codecopy.each do
				|c|
				## clear the line head
				c.gsub!(/^[\t| ]+/,'') if @configs[:raw];
				subindent if @outdents[index]
				@code << formatline(c)
				addindent if @indents[index]
				index += 1
			end
		end

		def getConfiguredCode ##{{{
			@ccode = @code.join("");
			@ccode;
		end ##}}}



		## sp: src pattern
		## val: replacement
		def replaceConfigInCodes sp,val ##{{{
			sp  = sp.to_s;
			val = val.to_s;
			p = Regexp.new "\<#{sp}\>";
			newcode = [];
			index=0;
			@code.each do
				|sc|
				rline = sc.gsub(p,val);
				sline = rline.split("\n");
				lnum  = sline.length;
				(lnum-1).times do
					_l = index+1;
					@indents.insert(_l,false);
					@outdents.insert(_l,false);
					_l += 1;
				end
				index += 1;
				newcode << sline;
				newcode.flatten!
			end
			@code=newcode ## replace
		end ##}}}


		def translateConfigs ##{{{
			generateRawCode
			@configs.each_pair do
				|c,v|
				replaceConfigInCodes c,v;
			end
		end ##}}}

		def setLocation f,l ##{{{
			@loc[:file] = f;
			@loc[:line] = l;
		end ##}}}
		def file; @loc[:file]; end
		def line; @loc[:line]; end

		def config **opts ##{{{
			opts.each_pair do
				|c,v|
				if @configs.has_key?(c)
					puts "Warning, config(#{c}) overridden from(#{@configs[c]}) to(#{v})"
				end
				@configs[c] = v;
			end
		end ##}}}
	end ##}}}




end ##}

class FPLibClass; ##{
end ##}

def fp name,opts={},&block ##{{{
	## if !block
	## 	puts "Fatal, you must define a feature partition with code info"
	## 	return
	## end

	name  = name.to_sym;

	## declared fp is a container, which now has no fp features, just to
	## create an FPLib instance in main
	if opts.has_key?(:container) && opts[:container]==true
		## instance name for instance_variable_set
		iname = ('@'+name.to_s).to_sym
		if opts.has_key?(:parent)
			iparent = ('@'+opts[:parent].to_s).to_sym
			## if has parent, and is a container
			p = $main.instance_variable_get(iparent)
			p.instance_variable_set(iname,FPLibClass.new)
			p.instance_eval do
				define_singleton_method name do
					$main.instance_variable_get(iname)
				end
			end
		else
			## if not has parent, then this is the top container
			## to create an FPLib instance in main
			$main.instance_variable_set(iname,FPLibClass.new)
			$main.instance_eval do
				define_singleton_method name do
					$main.instance_variable_get(iname)
				end
			end
		end
	else
		## if not has container option
		if opts.has_key?(:parent)
			## if has parent, store the fp into its parent
			## instance name for instance_variable_set
			iparent = ('@'+opts[:parent].to_s).to_sym
			##puts "Error, no parent:#{iparent} found" unless $main.instance_variable_defined?(iparent)
			p = $main.instance_variable_get(iparent);
			p.instance_eval do
				if opts.has_key?(:rawcode)
					newfp = FPLib.createNewFP name,opts[:parent],&block
				else
					newfp = FPLib.createAndRegisterNewFP name,opts[:parent],&block
				end
				define_singleton_method name do #{
					|**opts,&block|
					loc = caller(1)[0];
					file,line = loc.split(/:/);
					fpInst = newfp.createNewInstance;
					fpInst.setScope(opts[:scope]) if opts.has_key?(:scope);
					fpInst.setNameConfig(opts[:name]) if opts.has_key?(:name);
					fpInst.setLocation file,line.to_i;
					fpInst.instance_eval do
						block.call self,**opts if block
					end
					fpInst.translateConfigs
					if opts.has_key?(:rootfp)
						rootfp = FPLib.getFP opts[:rootfp]
						rootfp.addsubfp fpInst
					end
					return fpInst.getFormatedCode 0 if opts.has_key?(:rawcode)
				end #}
			end
		else ##{
			## else store the fp into FPLib
			FPLib.module_eval do
				if FPLib.method_defined?(name)
					puts "Error, feature partition already defined"
					return;
				end
				if opts.has_key?(:rawcode)
					newfp = FPLib.createNewFP name,nil,&block
				else
					newfp = FPLib.createAndRegisterNewFP name,nil,&block
				end
				##TODO, puts "debug: declare a fp method: #{name}, self: #{self}"
				define_singleton_method name do
					|**opts,&block|
					loc = caller(1)[0];
					file,line = loc.split(/:/);
					fpInst = newfp.createNewInstance;
					fpInst.setScope(opts[:scope]) if opts.has_key?(:scope);
					fpInst.setNameConfig(opts[:name]) if opts.has_key?(:name);
					fpInst.setLocation file,line.to_i;
					fpInst.instance_eval do
						block.call self,**opts if block
					end
					fpInst.translateConfigs
					if opts.has_key?(:rootfp)
						rootfp = FPLib.getFP opts[:rootfp]
						rootfp.addsubfp fpInst
					end
					return fpInst.getFormatedCode 0 if opts.has_key?(:rawcode)
				end
			end
		end ##}
	end

end ##}}}

