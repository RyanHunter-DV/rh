rhload 'lib/featurePart';

module AssCenter;

	@@targetFiles = {};

	class FileContent ##{{{
		def initialize f
			@fpis  = {}; ## is a hash because need reorder
			@locs  = [];
			@fname = f;
		end

		def addFpiAndLocation l,fpi ##{{{
			@locs << l;
			@fpis[l] = fpi;
		end ##}}}

		def getContentLineByLine ##{{{
			cnts = [];
			cindent = 0;
			locs_ordered = @locs.sort do |a,b|
				a<=>b
			end
			locs_ordered.each do
				|l|
				cnts << @fpis[l].getFormatedCode(cindent)
				cindent = @fpis[l].getCindent
				@fpis[l].subfps.each do |sfpi|
					cnts << sfpi.getFormatedCode(cindent)
					cindent = sfpi.getCindent
				end
			end
			return cnts;
		end ##}}}

	end ##}}}

	class Generator ##{{{
	end ##}}}

	def self.publish f ##{{{
		cnts = [];
		if @@targetFiles.has_key?(f)
			fc = @@targetFiles[f];
			## backup file if exists, TBD
			cnts = fc.getContentLineByLine
		end ##}
		return cnts;
	end ##}}}

	def self.generate cnts,o ##{{{
		fh = File.new o,'w'
		cnts.each do
			|line|
			fh.write line;
		end
		fh.close
	end ##}}}


	def self.locating f,l,fpi ##{{{
		@@targetFiles[f]=FileContent.new(f) unless @@targetFiles.include?(f);
		puts "l: #{l}, fpi: #{fpi.code}"
		@@targetFiles[f].addFpiAndLocation l,fpi
	end ##}}}

end

## o: output file
def assembly o ##{{{
	userfile = caller(1)[0].split(/:/)[0];
	userpath = File.dirname userfile
	o = File.join(userpath,o)
	fplist = FPLib.getFPs
	fplist.each do ##{
		|fp|
		unless fp.insts.empty?
			fp.insts.each_value do
				|fpi|
				##fpi.translateConfigs
				AssCenter.locating fpi.file,fpi.line,fpi
			end
		end
	end ##}
	cnts = AssCenter.publish userfile
	puts "generating target file: #{o}"
	AssCenter.generate cnts,o
end ##}}}
