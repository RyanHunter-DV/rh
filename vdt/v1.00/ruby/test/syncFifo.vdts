## vdts -n syncFifo
## ft depth 8
## ft ptrW 3
## ft width 32
##
## md -n syncFifo#{depth}x#{width}
## port -i iClk
## port -i iRstn
## port -i iWe
## port -i iRe
## port -i [#{width}-1:0] iWData
## port -o [#{width}-1:0] oRData
## port -o oFull
## port -o oEmpty
##
## sig -r [#{width}-1:0] mem [#{depth}] // vlog reg [#{width}-1:0] mem[#{depth}]
## sig -r [#{ptrW}-1:0] rPtr
## // sig -r [#{ptrW}-1:0] wPtr
## sig -r [#{ptrW}-1:0] rCount
##
##
## // use single selection block
## // if signal of -o has been declared before, then do not declare it
## // else automatically declare it
## lsel -s -n wPtrSel
## wPtrSel -p iClk -n iRstn
## wPtrSel -o [#{ptrW}-1:0] wPtr -r 0
## wPtrSel -i wPtr+1'b1 -c iWe==1'b1
## lsel -s -n rPtrSel
## rPtrSel -p iClk -n iRstn
## rPtrSel -o [#{ptrW}-1:0] rPtr -r 0
## rPtrSel -i rPtr+1'b1 -c iRe==1'b1
## lsel -s -n wDatSel
## wDatSel -p iClk -n iRstn
## wDatSel -o mem[wPtr]
## wDatSel -i iWData -c iWe==1'b1
## lsel -s -n rCountSel
## rCountSel -p iClk -n iRstn
## rCountSel -o rCount
## rCountSel -i rCount+1'b1 -c iWe&~iRe
## rCountSel -i rCount-1'b1 -c ~iWe&iRe
## rCountSel -i rCount -c default
##
## vdts -e
design :testDesign do #{
	signal :iClk, :in
	signal :iResetn,:in
	signal :iWe,:in
end #}

design :syncFifo,:width=>32,:depth=>8,:ptrW=>3 do #{

	signal :iClk,:in
	signal :iReset,:in
	signal :iWe,:in
	signal :iRe,:in
	signal :iWData,:in,feature.width
	signal :oRData,:out,feature.width

	## TODO, net of array
	## array :mem,feature.width,feature.depth


	## logic selection component
	import :ptrSel;

	signal :rPtr,:reg,feature.ptrW
	signal :wPtr,:reg,feature.ptrW

	ptrSel :rPtrSel do
		connect :s=>:iRe
		connect :o=>:rPtr
		connect :i=>:rPtr
	end

	ptrSel :wPtrSel do
		connect :s=>:iWe
		connect :o=>:wPtr
		connect :i=>:wPtr
	end

	testDesign :utest do
		connect :iClk=>:iClk
		connect :iResetn=>:iReset
		connect :iWe=>:iRe
	end

	publish ## TODO, this should be called outside of the target design, coded here just for test


end #}

component :ptrSel, :isSeq=>true,:w=>3 do

	signal :o,:out,feature.w
	signal :i,:in,feature.w
	signal :s,:in,1

	block :exe do
		if feature.isSeq
			puts "executing with isSeq==true"
			oo = o.rtlname;
			io = i.rtlname;
			so = s.rtlname;
			seqSel :sel0, 
			:clk=>parent.iClk,
			:rstn=>parent.iReset,
			:cond=>{
				"#{oo}<=#{io}+1'b1"=>"#{so}==1'b1",
			}
		else
			puts "executing with isSeq==false"
		end
	end
end

